1559674578892::cljs/quit
1559676493664:(ns cat-reagent.core)
1559676496885:position-map
1559676503342:(:board position-map)
1559676536998:(:board (:board position-map))
1559677065341::cljs/quit
1559678853939:(ns cat-reagent.core)
1559678857472:@user
1559678882488:@character
1559680504403:@user
1559737237297:(keyword :cat)
1559738678900:(into {} [{:cat 2} {:dog 3}])
1559740014632:(ns cat-reagent.core)
1559740023289:(make-edges size)
1559740047183:(* 32 18)
1559740078854:(/ 800 100)
1559740086136:(* (/ 800 100) 4)
1559740103377:(* (* (/ 800 100) 4) (* (/ 600 100) 4))
1559740117069:(* (/ 600 100) 4)
1559740184863:(/ (second size) 100)
1559740220518:(* 4 (/ (second size) 100))
1559740247940:(* 32 18)
1559740298859:(* 800 600)
1559740310076:(/ (* 800 600) 576)
1559740400314:(make-edges size)
1559740410290:(/ 576 192)
1559740438905:(make-edges size)
1559740596688:(range 576)
1559740605528:(range 1 \n       576)
1559740708952:(make-edges size)
1559740714944:(first (make-edges size))
1559741119277:(make-edges size)
1559741229044:(make-edges size 2\n            )
1559741449244:(apply uber/multidigraph (make-edges size))
1559741592882::cljs/quit
1559742862916:(apply util\n       /multidigraph (make-edges size))
1559742889626:(apply util/multidigraph (make-edges size))
1559742920457:(ns cat-reagent.core)
1559742922105:(apply util/multidigraph (make-edges size))
1559743039310:(apply cat-reagent.util/multidigraph (make-edges size))
1559743096701:(ns cat-reagent.util)
1559743102485:multidigraph
1559743116398:(multidigraph [[:39 :40]])
1559743134365:(uber/\n  multidigraph [[:39 :40]])
1559743145028:(uber/multidigraph [[:39 :40]])
1559743159875:(ubergraph.core/multidigraph [[:39 :40]])
1559743415790:(uber/multidigraph [[:39 :40]])
1559743435134:(ns cat-reagent.util)
1559743436558:(uber/multidigraph [[:39 :40]])
1559743777896:(multidigraph)
1559743854367:(uber/multidigraph [[:39 :40]])
1559743858927:(ns cat-reagent.util)
1559743860944:(uber/multidigraph [[:39 :40]])
1559743864823:(multidigraph)
1559743879367:(multidigraph [[:39 :40]])
1559743926390:(ns cat-reagent.util)
1559743928990:(multidigraph [[:39 :40]])
1559743948102:(multidigraph)
1559743952014:(ns cat-reagent.util)
1559743953094:(multidigraph)
1559744035940::reload-clj-files{:clj true :cljc true}
1559744038269:(multidigraph)
1559744249218:(multidigraph [[:39 :40]])
1559744280146:(ns cat-reagent.util)
1559744281362:(multidigraph [[:39 :40]])
1559744303737:(uber/multidigraph)
1559744310985:(ubergraph.core/multidigraph)
1559744424417:(apply uber/multidigraph (make-edges size))
1559744429711::cljs/quit
1559745493098:(ns cat-reagent.util)
1559745500656:(uber/multidigraph)
1559745777971::cljs/quit
1559746036494:(graph [1 2])
1559746043817:(l/\n  graph [1 2])
1559746049624:(l/graph [1 2])
1559746057881:(ns cat-reagent.core)
1559746059792:(l/graph [1 2])
1559746147992:(loom.graph [1 2])
1559746247423:(ns cat-reagent.core)
1559746642826::cljs/quit
1559746921818:(ns cat-reagent.core)
1559746937929:(loom.graph/graph [1 2])
1559746951657:(graph [1 2])
1559747000488:(loom.graph/digraph [1 2])
1559747011767:(graph/digraph [1 2])
1559747016359:(loom.graph/digraph [1 2])
1559747049750:g
1559747084136:(def g (graph/digraph [1 2]))
1559747085014:g
1559747266766:(def g (graph/digraph (make-spaces size)))
1559747292205:(def g (graph/digraph (make-edges size)))
1559747293588:g
1559747309422:(make-edges size)
1559747726170:(def g (graph/digraph (make-edges size)))
1559747727344:g
1559747749025:(def g (apply graph/digraph (make-edges size)))
1559747750344:g
1559747773680:(def g (apply graph/digraph (make-edges size)))
1559747775160:g
1559748469585:(bf-path g :68 :69)
1559748476233:(alg/bf-path g :68 :69)
1559748482234:(alg/bf-path g :68 :70)
1559750061737:row-length
1559751920430:(can-move? g :68 :70)
1559751936853:(alg/bf-path g :68 :70)
1559751940148:g
1559751950452:(def g (apply graph/digraph (make-edges size)))
1559751952075:g
1559751981780:(alg/bf-path g :68 :70)
1559751984755:(can-move? g :68 :70)
1559752001755:(can-move? g :68 :71\n           )
1559752011291:(can-move? g :68 :72\n           )
1559752049410:g
1559752148137:(def g (apply graph/digraph (make-edges size)))
1559752149904:g
1559752160937:(can-move? g :68 :72)
1559752831551:(change-position :68 1)
1559752839415:(change-position :68 32\n                 )
1559754749723:(remove :a #{:a :b :c})
1559754758610:#{:a :b :c}
1559754760834:(remove :a #{:a :b :c})
1559754788681:(disj #{:a :b :c} :a\n      )
1559755576737:{:a 1 :b 1}
1559755602434:(group-by val {:a 1 :b 1})
1559755746903:(group-by #(val %) {:a 1 :b 1})
1559755781718:(group-by #(val %) {:a 1 :b 1 :c 2})
1559755951021:(associate-by #(val %) {:a 1 :b 1 :c 2})
1559756410426:(into {} (map (fn [[k v] m] {v k}) {:a 1 :b 2 :c 3}))
1559756416362:(into {} (map (fn [[k v] m] {v k}) {:a 1 :b 1 :c 3}))
1559756426135:(map (fn [[k v] m] {v k}) {:a 1 :b 1 :c 3})
1559756441049:(merge-with conj (map (fn [[k v] m] {v k}) {:a 1 :b 1 :c 3}))
1559756486735:(merge-with conj (map (fn [[k v] m] {v [k]}) {:a 1 :b 1 :c 3}))
1559756498031:(into {} conj (map (fn [[k v] m] {v [k]}) {:a 1 :b 1 :c 3}))
1559756506295:(merge-with conj (map (fn [[k v] m] {v [k]}) {:a 1 :b 1 :c 3}))
1559756821179:(char-pos world-state :caretaker)
1559756888026:(character-position world-state :caretaker)
1559757182640:(map :loc (:characters world-state))
1559757210733:(character-position world-state :caretaker)
1559757215581:(character-position world-state :cat\n                    )
1559757223541:(character-position world-state :cat)
1559757294069:(:characters world-state)
1559757324068:(mapvals :loc (:characters world-state))
1559757327277:(:characters world-state)
1559757408108:(character-position world-state :cat)
1559757975743:(map-pos-to-char world-state)
1559757983069:world-state
1559758027646:(map-pos-to-char world-state)
1559758057295:{(character-position world-state :cat) (:cat item-map)}
1559758089598:{(character-position world-state :cat) (:cat item-map) (character-position world-state :caretaker) (:caretaker item-map)}
1559758102357:(map-pos-to-char world-state)
1559758214852:(:treasure-map world-state)
1559758414938:(map-pos-to-char world-state)
1559758423777:(map-pos-to-char world-state\n                 )
1559758446657:(map-pos-to-char world-state)
1559758471818:(into {} [{:a 1} {:b 2})
1559758476353:(into {} [{:a 1} {:b 2}])
1559758494265:(map-pos-to-char world-state)
1559758539065:(map #({% "$"}) (:treasure-map world-state))
1559758556120:(:treasure-map world-state)
1559758582008:(name :5)
1559758591744:(js/parseInt (name :5))
1559758617321:(map #(js/parseInt (name %)) (:treasure-map world-state))
1559758671367:(map #(% "$") (:treasure-map world-state))
1559758679095:(map #({% "$"}) (:treasure-map world-state))
1559758748710:(map #(hash-map % "$") (:treasure-map world-state))
1559758755712:(into {} (map #(hash-map % "$") (:treasure-map world-state)))
1559758783885:(map-pos-to-char world-state)
1559759116005:(update-in world-state [:characters :cat :treasure] inc)
1559759249744::cljs/quit
1559763478494:(make-edges size)
1559763488485:(ns cat-reagent.core)
1559763490693:(make-edges size)
1559763712955:(range 1 (+ 1 num-rows))
1559763786001:(* 18 32)
1559763885472:(cut-borders g)
1559764173470:(map #([% (+ 1 %)]) (cut-borders g))
1559764182085:(map #(vec % (+ 1 %)) (cut-borders g))
1559764189383:(vec 32 33)
1559764217364:(cut-borders g)
1559764302484:(bf-path (cut-borders g) :32 :33)
1559764308931:(alg/bf-path (cut-borders g) :32 :33)
1559764361890:(cut-borders g)
1559764383482:(apply graph/remove-edges g (cut-borders g))
1559764438994:(alg/bf-path (cut-borders g) :32 :33)
1559764469193:(cut-borders g)
1559764522472:(alg/bf-path (cut-borders g) :32 :33)
1559764637263:(alg/bf-path (cut-borders g) :33 :32\n             )
1559764735518:(cut-borders g)
1559764784421:(map #(list % (revers %)) (cut-borders g))
1559764789798:(map #(list % (reverse\n               %)) (cut-borders g))
1559764801118:(flatten (map #(list % (reverse\n               %)) (cut-borders g)))
1559764814702:(into list (map #(list % (reverse\n               %)) (cut-borders g)))
1559764844774:(into () (map #(list % (reverse\n               %)) (cut-borders g)))
1559764870349:(into () (map #(list % (vec (reverse\n               %))) (cut-borders g)))
1559764887556:(into () (map #(list % (vec (reverse %))) (cut-borders g)))
1559765035299:(map #(list % (vec (reverse %))) (cut-borders g))
1559765058740:(map #(% (vec (reverse %)) (cut-borders g))\n     )
1559765067250:(map #(% (vec (reverse %))) (cut-borders g))
1559765115210:(map #(list % (vec (reverse %))) (cut-borders g))
1559765127236:(concat (map #(list % (vec (reverse %))) (cut-borders g)))
1559765170609:(into [] (map #(list % (vec (reverse %))) (cut-borders g)))
1559765183361:(into [] (map #(vec % (vec (reverse %))) (cut-borders g)))
1559765189521:(map #(vec % (vec (reverse %))) (cut-borders g))
1559765446093:(add-reverse (cut-borders g))
1559765467477:(cut-borders g)
1559765482773:(add-reverse (cut-borders g))
1559765489372:(first (cut-borders g))
1559765500877:(cut-borders g)
1559765564453:(add-reverse (cut-borders g))
1559765567532:(cut-borders g)
1559765568972:(add-reverse (cut-borders g))
1559765921478:(cut-borders g)
1559765952087:(alg/bf-path (cut-borders g) :33 :32)
1559766007374:(alg/bf-path (cut-borders g) :32\n             :33)
1559766009958:(alg/bf-path (cut-borders g) :33 :32)
1559766043846:(cut-borders g)
1559766111108:(alg/bf-path (cut-borders g) :33 :32)
1559766116172:(alg/bf-path (cut-borders g) :32 :33)
1559766540191::cljs/quit
1559920128210:(ns cat-reagent.core)
1559920132287:@character
1559920157761:(get-in world-state [:characters @character :loc])
1559920215327:(get-in world-state [:board :cursor])
1559920355942:(cut-borders g)
1559920531940:g
1559921735409:(ns cat-reagent.core)
1559921737142:g
1559921771985:(mapv #(* row-length %) (range 1 2))
1559921786902:size
1559921790189:row-length
1559921794678:(mapv #(* row-length %) (range 1 2))
1559921803638:(mapv #(* row-length %) (range 1 3))
1559921869208:(last (iterate #(cut-edge g [(keynum %) (keynum (+ 1 %))]) (mapv #(* row-length %) (range 1 3))))
1559921894541:[32 64]
1559921923820::cljs/quit
1559922065374:(ns cat-reagent.core)
1559922071714:g
1559922101362:(cut-edge g [:32 :33])
1559922122683:(bf-path (cut-edge g [:32 :33]) :32 :33)
1559922127090:(alg/bf-path (cut-edge g [:32 :33]) :32 :33)
1559922196617:(alg/bf-path (cut-edge g [:32 :33]) :33 :32)
1559922266580:(map #([(keynum %) (keynum (+ 1 %))]) '(:32 :64))
1559922277665:(map #(vec (keynum %) (keynum (+ 1 %))) '(:32 :64))
1559922295370:(map #(apply vec (keynum %) (keynum (+ 1 %))) '(:32 :64))
1559922315490:(map #(vector (keynum %) (keynum (+ 1 %))) '(:32 :64))
1559922337512:(map #(vector (keynum %) (keynum (+ 1 %))) '(32 64))
1559922414097:(iterate #(cut-edge g %) (map #(vector (keynum %) (keynum (+ 1 %))) '(32 64)))
1559922433663:(pst)
1559922495247:(iterate #(cut-edge g (vector (keynum %) (keynum (+ 1 %)))) '(32 64)))
1559922516567:(iterate #(cut-edge g (vector (keynum %) (keynum (+ 1 %)))) '(32 64))
1559922676430:(second (iterate #(cut-edge g (vector (keynum %) (keynum (+ 1 %)))) '(32 64)))
1559922692687:(first\n (iterate #(cut-edge g (vector (keynum %) (keynum (+ 1 %)))) '(32 64)))
1559922880293:(mapv #(* row-length %) (range 1 (+ 1 num-rows)))
1559922891777::cljs/quit
1559923248320:(ns cat-reagent.core)
1559923285869:g
1559923404564:'([:32 :33] [:64 :65])
1559923412278:(cut-edges g '([:32 :33] [:64 :65]))
1559923431590:(alg/bf-path (cut-edges g '([:32 :33] [:64 :65])) :32 :33)
1559923466372:(alg/bf-path (cut-edges g '([:32 :33] [:64 :65])) :64 :65)
1559923582418:(cut-borders g)
1559923668409:(def g (cut-borders g))
1559923704088::cljs/quit
1559928718668:(make-vwall 3 4 4)
1559928774638:(ns cat-reagent.core)
1559928776366:(make-vwall 3 4 4)
1559929211650:(:vwalls world-state)
1559929253842:(into {} (:vwalls world-state))
1559929268049:(into #{} (:vwalls world-state))
1559929288104:(union (:vwalls world-state))
1559929295402:(clojure.set/union (:vwalls world-state))
1559929304200:(apply clojure.set/union (:vwalls world-state))
1559929411704:(map (fn [s] (hash-map s "|")) (apply clojure.set/union (:vwalls s)))
1559929419386:(map (fn [s] (hash-map s "|")) (apply clojure.set/union (:vwalls world-state)))
1559930140654:@character
1559930170247:(get-in world-state [:characters @character :message)
1559930174343:(get-in world-state [:characters @character :message])
1559930191793:(reset! (get-in world-state [:characters @character :message]) "hello")
1559930196510:(get-in world-state [:characters @character :message])
1559930267653:(update-status world-state (get-in world-state [:characters @character :message]) "goodbye")
1559930283597:(get-in world-state [:characters @character :message])
1559930431516:(update-status world-state (get-in world-state [:characters @character :message]) "goodbye")
1559930493627:(:treasure-map world-state)
1559930657138:(character-position world-state @character)
1559931874069:(rand-int)
1559931884715:(rand-int 7\n          )
1559931893011:(rand-int 7)
1559931953867:(dice-roll)
1559931972892:(take 5 (repeatedly (dice-roll)))
1559931991082:(take 5 (repeatedly dice-roll))
1559931998858:(take 100\n      (repeatedly dice-roll))
1559932047586:(noise 4)
1559932051370:(noise 3)
1559932311231:(:sound-edges world-state)
1559934029741:(alg/bf-path g :32 :33)
1559934061308:(alg/bf-path g :33 :34)
1559934068548:(alg/bf-path g :33 :36)
1559934987153::cljs/quit
1559935415488:(ns cat-reagent.core)
1559937165080::cljs/quit
1560436593956:hwalls
1560436600340:(ns cat-reagent.core)
1560436602243:hwalls
1560436639547:(flatten hwalls)
1560436647418:(union hwalls)
1560436651426:(apply union hwalls)
1560436659210:(apply clojure.set/union hwalls)
1560460082258::cljs/quit
